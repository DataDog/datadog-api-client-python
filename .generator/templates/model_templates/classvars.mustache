{{#isEnum}}
    allowed_values = {
        'value': {
{{#isNullable}}
            'None': None,
{{/isNullable}}
{{#allowableValues}}
{{#enumVars}}
            '{{name}}': {{{value}}},
{{/enumVars}}
{{/allowableValues}}
        },
    }
{{/isEnum}}
{{#hasEnums}}
    allowed_values = {
{{#vars}}
{{#isEnum}}
        '{{name}}': {
{{#isNullable}}
            'None': None,
{{/isNullable}}
{{#allowableValues}}
{{#enumVars}}
            '{{name}}': {{{value}}},
{{/enumVars}}
{{/allowableValues}}
        },
{{/isEnum}}
{{/vars}}
    }
{{/hasEnums}}

    validations = {
{{#hasValidation}}
        'value': {
{{> model_templates/validations }}
{{/hasValidation}}
{{#vars}}
{{#hasValidation}}
        '{{name}}': {
{{> model_templates/validations }}
{{/hasValidation}}
{{/vars}}
    }

{{#additionalProperties}}
    @cached_property
    def additional_properties_type():
{{#imports}}
{{#-first}}
        lazy_import()
{{/-first}}
{{/imports}}
        return ({{{dataType}}},)
{{/additionalProperties}}

    {{#isNullable}}_nullable = True{{/isNullable}}

    @cached_property
    def openapi_types():
{{#oneOf}}
{{#-first}}
        return {}
{{/-first}}
{{/oneOf}}
{{^oneOf}}
{{#imports}}
{{#-first}}
        lazy_import()
{{/-first}}
{{/imports}}
        return {
{{#isAlias}}
            'value': ({{{dataType}}},),
{{/isAlias}}
{{#isEnum}}
            'value': ({{{dataType}}},),
{{/isEnum}}
{{#isArray}}
            'value': ({{{dataType}}},),
{{/isArray}}
{{#vars}}
            '{{name}}': ({{{dataType}}},),
{{/vars}}
        }
{{/oneOf}}

{{#discriminator}}
    @cached_property
    def discriminator():
{{#mappedModels}}
{{#-first}}
{{#imports}}
{{#-first}}
        lazy_import()
{{/-first}}
{{/imports}}
{{/-first}}
{{/mappedModels}}
        val = {
{{#mappedModels}}
            '{{mappingName}}': {{{modelName}}},
{{/mappedModels}}
        }
        if not val:
            return None
        return {'{{{discriminatorName}}}': val}{{/discriminator}}
