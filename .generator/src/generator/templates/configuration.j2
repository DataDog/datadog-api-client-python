{% include "api_info.j2" %}

from {{ package }}.configuration import BaseConfiguration


class Configuration(BaseConfiguration):

    def __init__(
        self,
        host=None,
        api_key=None,
        api_key_prefix=None,
        access_token=None,
        username=None,
        password=None,
        discard_unknown_keys=True,
        disabled_client_side_validations="",
        server_index=None,
        server_variables=None,
        server_operation_index=None,
        server_operation_variables=None,
        ssl_ca_cert=None,
        compress=True,
    ):
        super(Configuration, self).__init__(
             host, api_key, api_key_prefix, access_token, username, password,
             discard_unknown_keys, disabled_client_side_validations, server_index,
             server_variables, server_operation_index, server_operation_variables,
             ssl_ca_cert, compress)

        # Keep track of unstable operations
        self.unstable_operations = {
        {%- for operations in apis.values() %}
        {%- for _, _, operation in operations|sort(attribute="2.operationId") %}
        {%- if "x-unstable" in operation %}
            "{{ operation.operationId|safe_snake_case }}": False,
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
        }

    def auth_settings(self):
        """Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        auth = {}
{%- for name, schema in openapi.components.securitySchemes.items() %}
{%- if schema.type == "apiKey" %}
        if "{{name}}" in self.api_key{% if "x-auth-id-alias" in schema %} or "{{ schema["x-auth-id-alias"] }}" in self.api_key{% endif %}:
            auth["{{name}}"] = {
                "type": "api_key",
                "in": "{{ schema.in }}",
                "key": "{{ schema.name }}",
                "value": self.get_api_key_with_prefix(
                    "{{name}}",{% if "x-auth-id-alias" in schema %}
                    alias="{{ schema["x-auth-id-alias"] }}",{%- endif %}
                ),
            }
{%- elif schema.type == "http" and schema.scheme == "basic" %}
        if self.username is not None and self.password is not None:
            auth["{{name}}"] = {
                "type": "basic",
                "in": "header",
                "key": "Authorization",
                "value": self.get_basic_auth_token()
            }
{%- elif schema.type == "http" and schema.scheme == "bearer" %}
        if self.access_token is not None:
            auth["{{name}}"] = {
                "type": "bearer",
                "in": "header",
                {% if schema.bearerFormat %}
                "format": "{{ schema.bearerFormat }}",
                {% endif %}
                "key": "Authorization",
                "value": "Bearer " + self.access_token
            }
{%- elif schema.type == "oauth2" %}
        if self.access_token is not None:
            auth["AuthZ"] = {
                "type": "oauth2",
                "in": "header",
                "key": "Authorization",
                "value": "Bearer " + self.access_token,
            }
{%- endif %}
{%- endfor %}
        return auth
{# keep new line #}
