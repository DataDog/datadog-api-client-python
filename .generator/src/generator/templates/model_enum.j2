class {{ name }}(ModelSimple):

    allowed_values = {
        "value": {
{%- for index, value in enumerate(model.enum) %}
            "{{ model["x-enum-varnames"][index] or value.upper() }}": {{ value|format_value(quotes='"') }},
{%- endfor %}
        },
    }

{% if model.nullable %}
    _nullable = True
{%- endif %}

    @cached_property
    def openapi_types(_):
        return {
            "value": ({{ get_enum_type(model) }},),
        }

{%- set default = get_enum_default(model) %}
    def __init__(self, *args, **kwargs):
        """
        {{ model.description|indent(8) }}

        Note that value can be passed either in args or in kwargs, but not in both.

        :param value: {%- if default != None %} If omitted defaults to {{ default|format_value }}.{%- endif %} Must be one of [{%- for value in model.enum %}{{ value|format_value }}{% if not loop.last %}, {% endif %}{%- endfor %}].
        :type value: {{ get_enum_type(model) }}
        """
        super().__init__(kwargs)

        if "value" in kwargs:
            value = kwargs.pop("value")
        elif args:
            args = list(args)
            value = args.pop(0)
{%- if default != None %}
        else:
            value = {{ default|format_value }}
{%- else %}
        else:
            raise ApiTypeError(
                "value is required, but not passed in args or kwargs and doesn't have default",
                path_to_item=self._path_to_item,
                valid_classes=(self.__class__,),
            )
{%- endif %}

        self._check_pos_args(args)

        self.value = value

        self._check_kw_args(kwargs)

    @classmethod
    def _from_openapi_data(cls, *args, **kwargs):
        """Helper creating a new instance from a response."""
        return cls(*args, **kwargs)
