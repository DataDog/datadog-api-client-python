# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (
    ModelComposed,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v1.model.logs_arithmetic_processor import LogsArithmeticProcessor
    from datadog_api_client.v1.model.logs_attribute_remapper import LogsAttributeRemapper
    from datadog_api_client.v1.model.logs_category_processor import LogsCategoryProcessor
    from datadog_api_client.v1.model.logs_category_processor_category import LogsCategoryProcessorCategory
    from datadog_api_client.v1.model.logs_date_remapper import LogsDateRemapper
    from datadog_api_client.v1.model.logs_filter import LogsFilter
    from datadog_api_client.v1.model.logs_geo_ip_parser import LogsGeoIPParser
    from datadog_api_client.v1.model.logs_grok_parser import LogsGrokParser
    from datadog_api_client.v1.model.logs_grok_parser_rules import LogsGrokParserRules
    from datadog_api_client.v1.model.logs_lookup_processor import LogsLookupProcessor
    from datadog_api_client.v1.model.logs_message_remapper import LogsMessageRemapper
    from datadog_api_client.v1.model.logs_pipeline_processor import LogsPipelineProcessor
    from datadog_api_client.v1.model.logs_service_remapper import LogsServiceRemapper
    from datadog_api_client.v1.model.logs_status_remapper import LogsStatusRemapper
    from datadog_api_client.v1.model.logs_string_builder_processor import LogsStringBuilderProcessor
    from datadog_api_client.v1.model.logs_trace_remapper import LogsTraceRemapper
    from datadog_api_client.v1.model.logs_trace_remapper_type import LogsTraceRemapperType
    from datadog_api_client.v1.model.logs_url_parser import LogsURLParser
    from datadog_api_client.v1.model.logs_user_agent_parser import LogsUserAgentParser
    from datadog_api_client.v1.model.target_format_type import TargetFormatType

    globals()["LogsArithmeticProcessor"] = LogsArithmeticProcessor
    globals()["LogsAttributeRemapper"] = LogsAttributeRemapper
    globals()["LogsCategoryProcessor"] = LogsCategoryProcessor
    globals()["LogsCategoryProcessorCategory"] = LogsCategoryProcessorCategory
    globals()["LogsDateRemapper"] = LogsDateRemapper
    globals()["LogsFilter"] = LogsFilter
    globals()["LogsGeoIPParser"] = LogsGeoIPParser
    globals()["LogsGrokParser"] = LogsGrokParser
    globals()["LogsGrokParserRules"] = LogsGrokParserRules
    globals()["LogsLookupProcessor"] = LogsLookupProcessor
    globals()["LogsMessageRemapper"] = LogsMessageRemapper
    globals()["LogsPipelineProcessor"] = LogsPipelineProcessor
    globals()["LogsServiceRemapper"] = LogsServiceRemapper
    globals()["LogsStatusRemapper"] = LogsStatusRemapper
    globals()["LogsStringBuilderProcessor"] = LogsStringBuilderProcessor
    globals()["LogsTraceRemapper"] = LogsTraceRemapper
    globals()["LogsTraceRemapperType"] = LogsTraceRemapperType
    globals()["LogsURLParser"] = LogsURLParser
    globals()["LogsUserAgentParser"] = LogsUserAgentParser
    globals()["TargetFormatType"] = TargetFormatType


class LogsProcessor(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {
        "samples": {
            "max_items": 5,
        },
    }

    @cached_property
    def openapi_types():
        return {}

    def __init__(self, *args, **kwargs):
        """LogsProcessor - a model defined in OpenAPI


        :param is_enabled: Whether or not the processor is enabled. If omitted the server will use the default value of False.
        :type is_enabled: bool, optional

        :param name: Name of the processor.
        :type name: str, optional

        :param samples: List of sample logs to test this grok parser.
        :type samples: [str], optional

        :param override_on_conflict: Override or not the target element if already set, If omitted the server will use the default value of False.
        :type override_on_conflict: bool, optional

        :param preserve_source: Remove or preserve the remapped source element. If omitted the server will use the default value of False.
        :type preserve_source: bool, optional

        :param source_type: Defines if the sources are from log `attribute` or `tag`. If omitted the server will use the default value of "attribute".
        :type source_type: str, optional

        :type target_format: TargetFormatType, optional

        :param target_type: Defines if the final attribute or tag name is from log `attribute` or `tag`. If omitted the server will use the default value of "attribute".
        :type target_type: str, optional

        :param normalize_ending_slashes: Normalize the ending slashes or not. If omitted the server will use the default value of False.
        :type normalize_ending_slashes: bool, none_type, optional

        :param is_encoded: Define if the source attribute is URL encoded or not. If omitted the server will use the default value of False.
        :type is_encoded: bool, optional

        :param is_replace_missing: If true, it replaces all missing attributes of `template` by an empty string. If `false` (default), skips the operation for missing attributes. If omitted the server will use the default value of False.
        :type is_replace_missing: bool, optional

        :type filter: LogsFilter, optional

        :param processors: Ordered list of processors in this pipeline.
        :type processors: [LogsProcessor], optional

        :param default_lookup: Value to set the target attribute if the source value is not found in the list.
        :type default_lookup: str, optional

        :type grok: LogsGrokParserRules, optional

        :param source: Source attribute used to perform the lookup.
        :type source: str, optional

        :type type: LogsTraceRemapperType, optional

        :param sources: Array of source attributes. If omitted the server will use the default value of ["dd.trace_id"].
        :type sources: [str], optional

        :param target: Name of the attribute that contains the corresponding value in the mapping list or the `default_lookup` if not found in the mapping list.
        :type target: str, optional

        :param categories: Array of filters to match or not a log and their corresponding `name`to assign a custom value to the log.
        :type categories: [LogsCategoryProcessorCategory], optional

        :param expression: Arithmetic operation between one or more log attributes.
        :type expression: str, optional

        :param template: A formula with one or more attributes and raw text.
        :type template: str, optional

        :param lookup_table: Mapping table of values for the source attribute and their associated target attribute values, formatted as `[\"source_key1,target_value1\", \"source_key2,target_value2\"]`
        :type lookup_table: [str], optional
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

    @classmethod
    def _from_openapi_data(cls, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(LogsProcessor, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        return self

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
            "anyOf": [],
            "allOf": [],
            "oneOf": [
                LogsArithmeticProcessor,
                LogsAttributeRemapper,
                LogsCategoryProcessor,
                LogsDateRemapper,
                LogsGeoIPParser,
                LogsGrokParser,
                LogsLookupProcessor,
                LogsMessageRemapper,
                LogsPipelineProcessor,
                LogsServiceRemapper,
                LogsStatusRemapper,
                LogsStringBuilderProcessor,
                LogsTraceRemapper,
                LogsURLParser,
                LogsUserAgentParser,
            ],
        }
