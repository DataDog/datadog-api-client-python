# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (
    ModelNormal,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v1.model.http_method import HTTPMethod
    from datadog_api_client.v1.model.synthetics_basic_auth import SyntheticsBasicAuth
    from datadog_api_client.v1.model.synthetics_test_headers import SyntheticsTestHeaders
    from datadog_api_client.v1.model.synthetics_test_request_certificate import SyntheticsTestRequestCertificate
    from datadog_api_client.v1.model.synthetics_test_request_proxy import SyntheticsTestRequestProxy

    globals()["HTTPMethod"] = HTTPMethod
    globals()["SyntheticsBasicAuth"] = SyntheticsBasicAuth
    globals()["SyntheticsTestHeaders"] = SyntheticsTestHeaders
    globals()["SyntheticsTestRequestCertificate"] = SyntheticsTestRequestCertificate
    globals()["SyntheticsTestRequestProxy"] = SyntheticsTestRequestProxy


class SyntheticsTestRequest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {
        "dns_server_port": {
            "inclusive_maximum": 65535,
            "inclusive_minimum": 1,
        },
        "number_of_packets": {
            "inclusive_maximum": 10,
            "inclusive_minimum": 0,
        },
    }

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "allow_insecure": (bool,),
            "basic_auth": (SyntheticsBasicAuth,),
            "body": (str,),
            "certificate": (SyntheticsTestRequestCertificate,),
            "dns_server": (str,),
            "dns_server_port": (int,),
            "follow_redirects": (bool,),
            "headers": (SyntheticsTestHeaders,),
            "host": (str,),
            "message": (str,),
            "method": (HTTPMethod,),
            "no_saving_response_body": (bool,),
            "number_of_packets": (int,),
            "port": (int,),
            "proxy": (SyntheticsTestRequestProxy,),
            "query": (dict,),
            "servername": (str,),
            "should_track_hops": (bool,),
            "timeout": (float,),
            "url": (str,),
        }

    attribute_map = {
        "allow_insecure": "allow_insecure",
        "basic_auth": "basicAuth",
        "body": "body",
        "certificate": "certificate",
        "dns_server": "dnsServer",
        "dns_server_port": "dnsServerPort",
        "follow_redirects": "follow_redirects",
        "headers": "headers",
        "host": "host",
        "message": "message",
        "method": "method",
        "no_saving_response_body": "noSavingResponseBody",
        "number_of_packets": "numberOfPackets",
        "port": "port",
        "proxy": "proxy",
        "query": "query",
        "servername": "servername",
        "should_track_hops": "shouldTrackHops",
        "timeout": "timeout",
        "url": "url",
    }

    read_only_vars = {}

    def __init__(self, *args, **kwargs):
        """SyntheticsTestRequest - a model defined in OpenAPI

        Keyword Args:
            allow_insecure (bool): [optional] Allows loading insecure content for an HTTP request in a multistep test step.
            basic_auth (SyntheticsBasicAuth): [optional]
            body (str): [optional] Body to include in the test.
            certificate (SyntheticsTestRequestCertificate): [optional]
            dns_server (str): [optional] DNS server to use for DNS tests.
            dns_server_port (int): [optional] DNS server port to use for DNS tests.
            follow_redirects (bool): [optional] Specifies whether or not the request follows redirects.
            headers (SyntheticsTestHeaders): [optional]
            host (str): [optional] Host name to perform the test with.
            message (str): [optional] Message to send for UDP or WebSocket tests.
            method (HTTPMethod): [optional]
            no_saving_response_body (bool): [optional] Determines whether or not to save the response body.
            number_of_packets (int): [optional] Number of pings to use per test.
            port (int): [optional] Port to use when performing the test.
            proxy (SyntheticsTestRequestProxy): [optional]
            query (dict): [optional] Query to use for the test.
            servername (str): [optional] For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
            should_track_hops (bool): [optional] Turns on a traceroute probe to discover all gateways along the path to the host destination.
            timeout (float): [optional] Timeout in seconds for the test.
            url (str): [optional] URL to perform the test with.
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

    @classmethod
    def _from_openapi_data(cls, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(SyntheticsTestRequest, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        return self
