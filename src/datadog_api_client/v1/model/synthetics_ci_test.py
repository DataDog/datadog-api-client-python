# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (
    ModelNormal,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v1.model.synthetics_basic_auth import SyntheticsBasicAuth
    from datadog_api_client.v1.model.synthetics_ci_batch_metadata import SyntheticsCIBatchMetadata
    from datadog_api_client.v1.model.synthetics_device_id import SyntheticsDeviceID
    from datadog_api_client.v1.model.synthetics_test_headers import SyntheticsTestHeaders
    from datadog_api_client.v1.model.synthetics_test_options_retry import SyntheticsTestOptionsRetry

    globals()["SyntheticsBasicAuth"] = SyntheticsBasicAuth
    globals()["SyntheticsCIBatchMetadata"] = SyntheticsCIBatchMetadata
    globals()["SyntheticsDeviceID"] = SyntheticsDeviceID
    globals()["SyntheticsTestHeaders"] = SyntheticsTestHeaders
    globals()["SyntheticsTestOptionsRetry"] = SyntheticsTestOptionsRetry


class SyntheticsCITest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {}

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "allow_insecure_certificates": (bool,),
            "basic_auth": (SyntheticsBasicAuth,),
            "body": (str,),
            "body_type": (str,),
            "cookies": (str,),
            "device_ids": ([SyntheticsDeviceID],),
            "follow_redirects": (bool,),
            "headers": (SyntheticsTestHeaders,),
            "locations": ([str],),
            "metadata": (SyntheticsCIBatchMetadata,),
            "public_id": (str,),
            "retry": (SyntheticsTestOptionsRetry,),
            "start_url": (str,),
            "variables": ({str: (str,)},),
        }

    attribute_map = {
        "public_id": "public_id",
        "allow_insecure_certificates": "allowInsecureCertificates",
        "basic_auth": "basicAuth",
        "body": "body",
        "body_type": "bodyType",
        "cookies": "cookies",
        "device_ids": "deviceIds",
        "follow_redirects": "followRedirects",
        "headers": "headers",
        "locations": "locations",
        "metadata": "metadata",
        "retry": "retry",
        "start_url": "startUrl",
        "variables": "variables",
    }

    read_only_vars = {}

    def __init__(self, public_id, *args, **kwargs):
        """SyntheticsCITest - a model defined in OpenAPI

        Args:
            public_id (str): The public ID of the Synthetics test to trigger.

        Keyword Args:
            allow_insecure_certificates (bool): [optional] Disable certificate checks in API tests.
            basic_auth (SyntheticsBasicAuth): [optional]
            body (str): [optional] Body to include in the test.
            body_type (str): [optional] Type of the data sent in a synthetics API test.
            cookies (str): [optional] Cookies for the request.
            device_ids ([SyntheticsDeviceID]): [optional] For browser test, array with the different device IDs used to run the test.
            follow_redirects (bool): [optional] For API HTTP test, whether or not the test should follow redirects.
            headers (SyntheticsTestHeaders): [optional]
            locations ([str]): [optional] Array of locations used to run the test.
            metadata (SyntheticsCIBatchMetadata): [optional]
            retry (SyntheticsTestOptionsRetry): [optional]
            start_url (str): [optional] Starting URL for the browser test.
            variables ({str: (str,)}): [optional] Variables to replace in the test.
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

        self.public_id = public_id

    @classmethod
    def _from_openapi_data(cls, public_id, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(SyntheticsCITest, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        self.public_id = public_id
        return self
