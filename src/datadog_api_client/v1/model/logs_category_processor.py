# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (
    ModelNormal,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v1.model.logs_category_processor_category import LogsCategoryProcessorCategory
    from datadog_api_client.v1.model.logs_category_processor_type import LogsCategoryProcessorType

    globals()["LogsCategoryProcessorCategory"] = LogsCategoryProcessorCategory
    globals()["LogsCategoryProcessorType"] = LogsCategoryProcessorType


class LogsCategoryProcessor(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {}

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "categories": ([LogsCategoryProcessorCategory],),
            "is_enabled": (bool,),
            "name": (str,),
            "target": (str,),
            "type": (LogsCategoryProcessorType,),
        }

    attribute_map = {
        "categories": "categories",
        "target": "target",
        "type": "type",
        "is_enabled": "is_enabled",
        "name": "name",
    }

    read_only_vars = {}

    def __init__(self, categories, target, type, *args, **kwargs):
        """LogsCategoryProcessor - a model defined in OpenAPI


        :param categories: Array of filters to match or not a log and their corresponding `name`to assign a custom value to the log.
        :type categories: [LogsCategoryProcessorCategory]

        :param target: Name of the target attribute which value is defined by the matching category.
        :type target: str

        :type type: LogsCategoryProcessorType

        :param is_enabled: Whether or not the processor is enabled. If omitted the server will use the default value of False.
        :type is_enabled: bool, optional

        :param name: Name of the processor.
        :type name: str, optional
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

        self.categories = categories
        self.target = target
        self.type = type

    @classmethod
    def _from_openapi_data(cls, categories, target, type, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(LogsCategoryProcessor, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        self.categories = categories
        self.target = target
        self.type = type
        return self
