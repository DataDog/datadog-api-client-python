# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (
    ModelNormal,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v1.model.service_summary_widget_definition_type import ServiceSummaryWidgetDefinitionType
    from datadog_api_client.v1.model.widget_service_summary_display_format import WidgetServiceSummaryDisplayFormat
    from datadog_api_client.v1.model.widget_size_format import WidgetSizeFormat
    from datadog_api_client.v1.model.widget_text_align import WidgetTextAlign
    from datadog_api_client.v1.model.widget_time import WidgetTime

    globals()["ServiceSummaryWidgetDefinitionType"] = ServiceSummaryWidgetDefinitionType
    globals()["WidgetServiceSummaryDisplayFormat"] = WidgetServiceSummaryDisplayFormat
    globals()["WidgetSizeFormat"] = WidgetSizeFormat
    globals()["WidgetTextAlign"] = WidgetTextAlign
    globals()["WidgetTime"] = WidgetTime


class ServiceSummaryWidgetDefinition(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {}

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "display_format": (WidgetServiceSummaryDisplayFormat,),
            "env": (str,),
            "service": (str,),
            "show_breakdown": (bool,),
            "show_distribution": (bool,),
            "show_errors": (bool,),
            "show_hits": (bool,),
            "show_latency": (bool,),
            "show_resource_list": (bool,),
            "size_format": (WidgetSizeFormat,),
            "span_name": (str,),
            "time": (WidgetTime,),
            "title": (str,),
            "title_align": (WidgetTextAlign,),
            "title_size": (str,),
            "type": (ServiceSummaryWidgetDefinitionType,),
        }

    attribute_map = {
        "env": "env",
        "service": "service",
        "span_name": "span_name",
        "type": "type",
        "display_format": "display_format",
        "show_breakdown": "show_breakdown",
        "show_distribution": "show_distribution",
        "show_errors": "show_errors",
        "show_hits": "show_hits",
        "show_latency": "show_latency",
        "show_resource_list": "show_resource_list",
        "size_format": "size_format",
        "time": "time",
        "title": "title",
        "title_align": "title_align",
        "title_size": "title_size",
    }

    read_only_vars = {}

    def __init__(self, env, service, span_name, type, *args, **kwargs):
        """ServiceSummaryWidgetDefinition - a model defined in OpenAPI

        Args:
            env (str): APM environment.
            service (str): APM service.
            span_name (str): APM span name.
            type (ServiceSummaryWidgetDefinitionType):

        Keyword Args:
            display_format (WidgetServiceSummaryDisplayFormat): [optional]
            show_breakdown (bool): [optional] Whether to show the latency breakdown or not.
            show_distribution (bool): [optional] Whether to show the latency distribution or not.
            show_errors (bool): [optional] Whether to show the error metrics or not.
            show_hits (bool): [optional] Whether to show the hits metrics or not.
            show_latency (bool): [optional] Whether to show the latency metrics or not.
            show_resource_list (bool): [optional] Whether to show the resource list or not.
            size_format (WidgetSizeFormat): [optional]
            time (WidgetTime): [optional]
            title (str): [optional] Title of the widget.
            title_align (WidgetTextAlign): [optional]
            title_size (str): [optional] Size of the title.
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

        self.env = env
        self.service = service
        self.span_name = span_name
        self.type = type

    @classmethod
    def _from_openapi_data(cls, env, service, span_name, type, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(ServiceSummaryWidgetDefinition, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        self.env = env
        self.service = service
        self.span_name = span_name
        self.type = type
        return self
