# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
)


def lazy_import():
    from datadog_api_client.v1.model.creator import Creator
    from datadog_api_client.v1.model.service_level_objective_query import ServiceLevelObjectiveQuery
    from datadog_api_client.v1.model.slo_threshold import SLOThreshold
    from datadog_api_client.v1.model.slo_type import SLOType

    globals()["Creator"] = Creator
    globals()["SLOThreshold"] = SLOThreshold
    globals()["SLOType"] = SLOType
    globals()["ServiceLevelObjectiveQuery"] = ServiceLevelObjectiveQuery


class SLOResponseData(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "configured_alert_ids": ([int],),  # noqa: E501
            "created_at": (int,),  # noqa: E501
            "creator": (Creator,),  # noqa: E501
            "description": (
                str,
                none_type,
            ),  # noqa: E501
            "groups": ([str],),  # noqa: E501
            "id": (str,),  # noqa: E501
            "modified_at": (int,),  # noqa: E501
            "monitor_ids": ([int],),  # noqa: E501
            "monitor_tags": ([str],),  # noqa: E501
            "name": (str,),  # noqa: E501
            "query": (ServiceLevelObjectiveQuery,),  # noqa: E501
            "tags": ([str],),  # noqa: E501
            "thresholds": ([SLOThreshold],),  # noqa: E501
            "type": (SLOType,),  # noqa: E501
        }

    discriminator = None

    attribute_map = {
        "configured_alert_ids": "configured_alert_ids",  # noqa: E501
        "created_at": "created_at",  # noqa: E501
        "creator": "creator",  # noqa: E501
        "description": "description",  # noqa: E501
        "groups": "groups",  # noqa: E501
        "id": "id",  # noqa: E501
        "modified_at": "modified_at",  # noqa: E501
        "monitor_ids": "monitor_ids",  # noqa: E501
        "monitor_tags": "monitor_tags",  # noqa: E501
        "name": "name",  # noqa: E501
        "query": "query",  # noqa: E501
        "tags": "tags",  # noqa: E501
        "thresholds": "thresholds",  # noqa: E501
        "type": "type",  # noqa: E501
    }

    read_only_vars = {
        "created_at",  # noqa: E501
        "id",  # noqa: E501
        "modified_at",  # noqa: E501
    }

    _composed_schemas = {}

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SLOResponseData - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            configured_alert_ids ([int]): A list of SLO monitors IDs that reference this SLO. This field is returned only when `with_configured_alert_ids` parameter is true in query.. [optional]  # noqa: E501
            created_at (int): Creation timestamp (UNIX time in seconds)  Always included in service level objective responses.. [optional]  # noqa: E501
            creator (Creator): [optional]  # noqa: E501
            description (str, none_type): A user-defined description of the service level objective.  Always included in service level objective responses (but may be `null`). Optional in create/update requests.. [optional]  # noqa: E501
            groups ([str]): A list of (up to 20) monitor groups that narrow the scope of a monitor service level objective.  Included in service level objective responses if it is not empty. Optional in create/update requests for monitor service level objectives, but may only be used when then length of the `monitor_ids` field is one.. [optional]  # noqa: E501
            id (str): A unique identifier for the service level objective object.  Always included in service level objective responses.. [optional]  # noqa: E501
            modified_at (int): Modification timestamp (UNIX time in seconds)  Always included in service level objective responses.. [optional]  # noqa: E501
            monitor_ids ([int]): A list of monitor ids that defines the scope of a monitor service level objective. **Required if type is `monitor`**.. [optional]  # noqa: E501
            monitor_tags ([str]): The union of monitor tags for all monitors referenced by the `monitor_ids` field. Always included in service level objective responses for monitor service level objectives (but may be empty). Ignored in create/update requests. Does not affect which monitors are included in the service level objective (that is determined entirely by the `monitor_ids` field).. [optional]  # noqa: E501
            name (str): The name of the service level objective object.. [optional]  # noqa: E501
            query (ServiceLevelObjectiveQuery): [optional]  # noqa: E501
            tags ([str]): A list of tags associated with this service level objective. Always included in service level objective responses (but may be empty). Optional in create/update requests.. [optional]  # noqa: E501
            thresholds ([SLOThreshold]): The thresholds (timeframes and associated targets) for this service level objective object.. [optional]  # noqa: E501
            type (SLOType): [optional]  # noqa: E501
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Helper creating a new instance from a response."""

        self = super(SLOResponseData, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        return self
