# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v1.model_utils import (
    ModelNormal,
    cached_property,
    none_type,
)


def lazy_import():
    from datadog_api_client.v1.model.downtime_recurrence import DowntimeRecurrence

    globals()["DowntimeRecurrence"] = DowntimeRecurrence


class DowntimeChild(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {
        "creator_id": {
            "inclusive_maximum": 2147483647,
        },
        "downtime_type": {
            "inclusive_maximum": 2147483647,
        },
        "updater_id": {
            "inclusive_maximum": 2147483647,
        },
    }

    _nullable = True

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "active": (bool,),
            "canceled": (
                int,
                none_type,
            ),
            "creator_id": (int,),
            "disabled": (bool,),
            "downtime_type": (int,),
            "end": (
                int,
                none_type,
            ),
            "id": (int,),
            "message": (str,),
            "monitor_id": (
                int,
                none_type,
            ),
            "monitor_tags": ([str],),
            "parent_id": (
                int,
                none_type,
            ),
            "recurrence": (DowntimeRecurrence,),
            "scope": ([str],),
            "start": (int,),
            "timezone": (str,),
            "updater_id": (
                int,
                none_type,
            ),
        }

    attribute_map = {
        "active": "active",
        "canceled": "canceled",
        "creator_id": "creator_id",
        "disabled": "disabled",
        "downtime_type": "downtime_type",
        "end": "end",
        "id": "id",
        "message": "message",
        "monitor_id": "monitor_id",
        "monitor_tags": "monitor_tags",
        "parent_id": "parent_id",
        "recurrence": "recurrence",
        "scope": "scope",
        "start": "start",
        "timezone": "timezone",
        "updater_id": "updater_id",
    }

    read_only_vars = {
        "active",
        "canceled",
        "creator_id",
        "downtime_type",
        "id",
        "updater_id",
    }

    def __init__(self, *args, **kwargs):
        """DowntimeChild - a model defined in OpenAPI

        Keyword Args:
            active (bool): [optional] If a scheduled downtime currently exists.
            canceled (int, none_type): [optional] If a scheduled downtime is canceled.
            creator_id (int): [optional] User ID of the downtime creator.
            disabled (bool): [optional] If a downtime has been disabled.
            downtime_type (int): [optional] `0` for a downtime applied on `*` or all, `1` when the downtime is only scoped to hosts, or `2` when the downtime is scoped to anything but hosts.
            end (int, none_type): [optional] POSIX timestamp to end the downtime. If not provided, the downtime is in effect indefinitely until you cancel it.
            id (int): [optional] The downtime ID.
            message (str): [optional] A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
            monitor_id (int, none_type): [optional] A single monitor to which the downtime applies. If not provided, the downtime applies to all monitors.
            monitor_tags ([str]): [optional] A comma-separated list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match ALL provided monitor tags. For example, `service:postgres` **AND** `team:frontend`.
            parent_id (int, none_type): [optional] ID of the parent Downtime.
            recurrence (DowntimeRecurrence): [optional]
            scope ([str]): [optional] The scope(s) to which the downtime applies. For example, `host:app2`. Provide multiple scopes as a comma-separated list like `env:dev,env:prod`. The resulting downtime applies to sources that matches ALL provided scopes (`env:dev` **AND** `env:prod`).
            start (int): [optional] POSIX timestamp to start the downtime. If not provided, the downtime starts the moment it is created.
            timezone (str): [optional] The timezone in which to display the downtime's start and end times in Datadog applications.
            updater_id (int, none_type): [optional] ID of the last user that updated the downtime.
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

    @classmethod
    def _from_openapi_data(cls, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(DowntimeChild, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        return self
