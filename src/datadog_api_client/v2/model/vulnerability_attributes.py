# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.
from __future__ import annotations

from typing import List, Union, TYPE_CHECKING

from datadog_api_client.model_utils import (
    ModelNormal,
    cached_property,
    unset,
    UnsetType,
)


if TYPE_CHECKING:
    from datadog_api_client.v2.model.code_location import CodeLocation
    from datadog_api_client.v2.model.vulnerability_cvss import VulnerabilityCvss
    from datadog_api_client.v2.model.vulnerability_dependency_locations import VulnerabilityDependencyLocations
    from datadog_api_client.v2.model.vulnerability_ecosystem import VulnerabilityEcosystem
    from datadog_api_client.v2.model.library import Library
    from datadog_api_client.v2.model.remediation import Remediation
    from datadog_api_client.v2.model.vulnerability_risks import VulnerabilityRisks
    from datadog_api_client.v2.model.vulnerability_status import VulnerabilityStatus
    from datadog_api_client.v2.model.vulnerability_tool import VulnerabilityTool
    from datadog_api_client.v2.model.vulnerability_type import VulnerabilityType


class VulnerabilityAttributes(ModelNormal):
    @cached_property
    def openapi_types(_):
        from datadog_api_client.v2.model.code_location import CodeLocation
        from datadog_api_client.v2.model.vulnerability_cvss import VulnerabilityCvss
        from datadog_api_client.v2.model.vulnerability_dependency_locations import VulnerabilityDependencyLocations
        from datadog_api_client.v2.model.vulnerability_ecosystem import VulnerabilityEcosystem
        from datadog_api_client.v2.model.library import Library
        from datadog_api_client.v2.model.remediation import Remediation
        from datadog_api_client.v2.model.vulnerability_risks import VulnerabilityRisks
        from datadog_api_client.v2.model.vulnerability_status import VulnerabilityStatus
        from datadog_api_client.v2.model.vulnerability_tool import VulnerabilityTool
        from datadog_api_client.v2.model.vulnerability_type import VulnerabilityType

        return {
            "advisory_id": (str,),
            "code_location": (CodeLocation,),
            "cve_list": ([str],),
            "cvss": (VulnerabilityCvss,),
            "dependency_locations": (VulnerabilityDependencyLocations,),
            "description": (str,),
            "ecosystem": (VulnerabilityEcosystem,),
            "exposure_time": (int,),
            "first_detection": (str,),
            "fix_available": (bool,),
            "language": (str,),
            "last_detection": (str,),
            "library": (Library,),
            "remediations": ([Remediation],),
            "repo_digests": ([str],),
            "risks": (VulnerabilityRisks,),
            "status": (VulnerabilityStatus,),
            "title": (str,),
            "tool": (VulnerabilityTool,),
            "type": (VulnerabilityType,),
        }

    attribute_map = {
        "advisory_id": "advisory_id",
        "code_location": "code_location",
        "cve_list": "cve_list",
        "cvss": "cvss",
        "dependency_locations": "dependency_locations",
        "description": "description",
        "ecosystem": "ecosystem",
        "exposure_time": "exposure_time",
        "first_detection": "first_detection",
        "fix_available": "fix_available",
        "language": "language",
        "last_detection": "last_detection",
        "library": "library",
        "remediations": "remediations",
        "repo_digests": "repo_digests",
        "risks": "risks",
        "status": "status",
        "title": "title",
        "tool": "tool",
        "type": "type",
    }

    def __init__(
        self_,
        cve_list: List[str],
        cvss: VulnerabilityCvss,
        description: str,
        exposure_time: int,
        first_detection: str,
        fix_available: bool,
        language: str,
        last_detection: str,
        remediations: List[Remediation],
        risks: VulnerabilityRisks,
        status: VulnerabilityStatus,
        title: str,
        tool: VulnerabilityTool,
        type: VulnerabilityType,
        advisory_id: Union[str, UnsetType] = unset,
        code_location: Union[CodeLocation, UnsetType] = unset,
        dependency_locations: Union[VulnerabilityDependencyLocations, UnsetType] = unset,
        ecosystem: Union[VulnerabilityEcosystem, UnsetType] = unset,
        library: Union[Library, UnsetType] = unset,
        repo_digests: Union[List[str], UnsetType] = unset,
        **kwargs,
    ):
        """
        The JSON:API attributes of the vulnerability.

        :param advisory_id: Vulnerability advisory ID.
        :type advisory_id: str, optional

        :param code_location: Code vulnerability location.
        :type code_location: CodeLocation, optional

        :param cve_list: Vulnerability CVE list.
        :type cve_list: [str]

        :param cvss: Vulnerability severities.
        :type cvss: VulnerabilityCvss

        :param dependency_locations: Static library vulnerability location.
        :type dependency_locations: VulnerabilityDependencyLocations, optional

        :param description: Vulnerability description.
        :type description: str

        :param ecosystem: The related vulnerability asset ecosystem.
        :type ecosystem: VulnerabilityEcosystem, optional

        :param exposure_time: Vulnerability exposure time in seconds.
        :type exposure_time: int

        :param first_detection: First detection of the vulnerability in `RFC 3339 <https://datatracker.ietf.org/doc/html/rfc3339>`_ format
        :type first_detection: str

        :param fix_available: Whether the vulnerability has a remediation or not.
        :type fix_available: bool

        :param language: Vulnerability language.
        :type language: str

        :param last_detection: Last detection of the vulnerability in `RFC 3339 <https://datatracker.ietf.org/doc/html/rfc3339>`_ format
        :type last_detection: str

        :param library: Vulnerability library.
        :type library: Library, optional

        :param remediations: List of remediations.
        :type remediations: [Remediation]

        :param repo_digests: Vulnerability ``repo_digest`` list (when the vulnerability is related to ``Image`` asset).
        :type repo_digests: [str], optional

        :param risks: Vulnerability risks.
        :type risks: VulnerabilityRisks

        :param status: The vulnerability status.
        :type status: VulnerabilityStatus

        :param title: Vulnerability title.
        :type title: str

        :param tool: The vulnerability tool.
        :type tool: VulnerabilityTool

        :param type: The vulnerability type.
        :type type: VulnerabilityType
        """
        if advisory_id is not unset:
            kwargs["advisory_id"] = advisory_id
        if code_location is not unset:
            kwargs["code_location"] = code_location
        if dependency_locations is not unset:
            kwargs["dependency_locations"] = dependency_locations
        if ecosystem is not unset:
            kwargs["ecosystem"] = ecosystem
        if library is not unset:
            kwargs["library"] = library
        if repo_digests is not unset:
            kwargs["repo_digests"] = repo_digests
        super().__init__(kwargs)

        self_.cve_list = cve_list
        self_.cvss = cvss
        self_.description = description
        self_.exposure_time = exposure_time
        self_.first_detection = first_detection
        self_.fix_available = fix_available
        self_.language = language
        self_.last_detection = last_detection
        self_.remediations = remediations
        self_.risks = risks
        self_.status = status
        self_.title = title
        self_.tool = tool
        self_.type = type
