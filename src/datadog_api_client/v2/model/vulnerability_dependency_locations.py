# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.
from __future__ import annotations

from typing import Union, TYPE_CHECKING

from datadog_api_client.model_utils import (
    ModelNormal,
    cached_property,
    unset,
    UnsetType,
)


if TYPE_CHECKING:
    from datadog_api_client.v2.model.dependency_location import DependencyLocation


class VulnerabilityDependencyLocations(ModelNormal):
    @cached_property
    def openapi_types(_):
        from datadog_api_client.v2.model.dependency_location import DependencyLocation

        return {
            "block": (DependencyLocation,),
            "name": (DependencyLocation,),
            "version": (DependencyLocation,),
        }

    attribute_map = {
        "block": "block",
        "name": "name",
        "version": "version",
    }

    def __init__(
        self_,
        block: DependencyLocation,
        name: Union[DependencyLocation, UnsetType] = unset,
        version: Union[DependencyLocation, UnsetType] = unset,
        **kwargs,
    ):
        """
        Static library vulnerability location.

        :param block: Static library vulnerability location.
        :type block: DependencyLocation

        :param name: Static library vulnerability location.
        :type name: DependencyLocation, optional

        :param version: Static library vulnerability location.
        :type version: DependencyLocation, optional
        """
        if name is not unset:
            kwargs["name"] = name
        if version is not unset:
            kwargs["version"] = version
        super().__init__(kwargs)

        self_.block = block
