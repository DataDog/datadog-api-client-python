# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v2.model_utils import (
    ModelNormal,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v2.model.security_monitoring_rule_query_aggregation import (
        SecurityMonitoringRuleQueryAggregation,
    )

    globals()["SecurityMonitoringRuleQueryAggregation"] = SecurityMonitoringRuleQueryAggregation


class SecurityMonitoringRuleQuery(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {}

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "aggregation": (SecurityMonitoringRuleQueryAggregation,),
            "distinct_fields": ([str],),
            "group_by_fields": ([str],),
            "metric": (str,),
            "name": (str,),
            "query": (str,),
        }

    attribute_map = {
        "aggregation": "aggregation",
        "distinct_fields": "distinctFields",
        "group_by_fields": "groupByFields",
        "metric": "metric",
        "name": "name",
        "query": "query",
    }

    read_only_vars = {}

    def __init__(self, *args, **kwargs):
        """SecurityMonitoringRuleQuery - a model defined in OpenAPI

        Keyword Args:
            aggregation (SecurityMonitoringRuleQueryAggregation): [optional]
            distinct_fields ([str]): [optional] Field for which the cardinality is measured. Sent as an array.
            group_by_fields ([str]): [optional] Fields to group by.
            metric (str): [optional] The target field to aggregate over when using the sum or max aggregations.
            name (str): [optional] Name of the query.
            query (str): [optional] Query to run on logs.
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

    @classmethod
    def _from_openapi_data(cls, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(SecurityMonitoringRuleQuery, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        return self
